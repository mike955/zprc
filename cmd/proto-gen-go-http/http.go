package main

import (
	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage = protogen.GoImportPath("context")
	mimePackage    = protogen.GoImportPath("mime")
	httpPackage    = protogen.GoImportPath("net/http")
	timePackage    = protogen.GoImportPath("time")
)

var (
	muxPackage       = protogen.GoImportPath("github.com/gorilla/mux")
	transportPackage = protogen.GoImportPath("github.com/mike955/zrpc/transform/http")
	logrusPackage    = protogen.GoImportPath("github.com/sirupsen/logrus")
)

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_http.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-http. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the grpc package it is being compiled against.")
	g.P("var _ = new(", contextPackage.Ident("Context"), ")")
	g.P("var _ = new(", httpPackage.Ident("Request"), ")")
	g.P("var _ = ", muxPackage.Ident("NewRouter"))
	g.P("var _ = ", mimePackage.Ident("ErrInvalidMediaParameter"))
	g.P("var _ = ", timePackage.Ident("Second"))
	g.P("var _ = ", transportPackage.Ident("Version"))
	g.P("var _ = ", logrusPackage.Ident("New()"))
	g.P()
	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}

	sd := &serviceDesc{
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Metadata:    file.Desc.Path(),
	}

	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if rule != nil && ok {
			methodDesc := &methodDesc{
				Name:    method.GoName,
				Request: g.QualifiedGoIdent(method.Input.GoIdent),
				Reply:   g.QualifiedGoIdent(method.Output.GoIdent),
				Path:    rule.GetPost(),
				Method:  "POST",
			}
			sd.Methods = append(sd.Methods, methodDesc)
		}
	}
	g.P((sd.execute()))
}

const deprecationComment = "// Deprecated: Do not use."
